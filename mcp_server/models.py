# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T13:38:38+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class ConflictException(RootModel[Any]):
    root: Any


class ContentClassifier(Enum):
    FreeOfPersonallyIdentifiableInformation = 'FreeOfPersonallyIdentifiableInformation'
    FreeOfAdultContent = 'FreeOfAdultContent'


class ContentClassifiers(RootModel[List[ContentClassifier]]):
    root: List[ContentClassifier] = Field(..., max_length=256)


class DeleteHumanLoopRequest(BaseModel):
    pass


class DeleteHumanLoopResponse(BaseModel):
    pass


class DescribeHumanLoopRequest(BaseModel):
    pass


class FailureReason(RootModel[constr(max_length=1024)]):
    root: constr(max_length=1024)


class FlowDefinitionArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:flow-definition/.*',
            max_length=1024,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:flow-definition/.*',
        max_length=1024,
    )


class HumanLoopArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:human-loop/.*',
            max_length=1024,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:human-loop/.*',
        max_length=1024,
    )


class HumanLoopDataAttributes(BaseModel):
    ContentClassifiers_1: ContentClassifiers = Field(..., alias='ContentClassifiers')


class HumanLoopName(
    RootModel[constr(pattern=r'^[a-z0-9](-*[a-z0-9])*$', min_length=1, max_length=63)]
):
    root: constr(pattern=r'^[a-z0-9](-*[a-z0-9])*$', min_length=1, max_length=63)


class HumanLoopStatus(Enum):
    InProgress = 'InProgress'
    Failed = 'Failed'
    Completed = 'Completed'
    Stopped = 'Stopped'
    Stopping = 'Stopping'


class InputContent(RootModel[constr(max_length=3145728)]):
    root: constr(max_length=3145728)


class InternalServerException(RootModel[Any]):
    root: Any


class ListHumanLoopsRequest(BaseModel):
    pass


class MaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class NextToken(RootModel[constr(pattern=r'.*', max_length=8192)]):
    root: constr(pattern=r'.*', max_length=8192)


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ServiceQuotaExceededException(RootModel[Any]):
    root: Any


class SortOrder(Enum):
    Ascending = 'Ascending'
    Descending = 'Descending'


class StartHumanLoopResponse(BaseModel):
    HumanLoopArn_1: Optional[HumanLoopArn] = Field(None, alias='HumanLoopArn')


class StopHumanLoopRequest(BaseModel):
    HumanLoopName_1: HumanLoopName = Field(..., alias='HumanLoopName')


class StopHumanLoopResponse(BaseModel):
    pass


class String(RootModel[str]):
    root: str


class ThrottlingException(RootModel[Any]):
    root: Any


class Timestamp(RootModel[datetime]):
    root: datetime


class ValidationException(RootModel[Any]):
    root: Any


class DataAttributes(BaseModel):
    ContentClassifiers_1: Optional[ContentClassifiers] = Field(
        None, alias='ContentClassifiers'
    )


class HumanLoopInput1(BaseModel):
    InputContent_1: Optional[InputContent] = Field(None, alias='InputContent')


class HumanLoopsPostRequest(BaseModel):
    DataAttributes_1: Optional[DataAttributes] = Field(
        None,
        alias='DataAttributes',
        description='Attributes of the data specified by the customer. Use these to describe the data to be labeled.',
    )
    FlowDefinitionArn: constr(
        pattern=r'arn:aws[a-z\-]*:sagemaker:[a-z0-9\-]*:[0-9]{12}:flow-definition/.*',
        max_length=1024,
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the flow definition associated with this human loop.',
    )
    HumanLoopInput: HumanLoopInput1 = Field(
        ..., description='An object containing the human loop input in JSON format.'
    )
    HumanLoopName: constr(
        pattern=r'^[a-z0-9](-*[a-z0-9])*$', min_length=1, max_length=63
    ) = Field(..., description='The name of the human loop.')


class HumanLoopsStopPostRequest(BaseModel):
    HumanLoopName: constr(
        pattern=r'^[a-z0-9](-*[a-z0-9])*$', min_length=1, max_length=63
    ) = Field(..., description='The name of the human loop that you want to stop.')


class HumanLoopInput(BaseModel):
    InputContent_1: InputContent = Field(..., alias='InputContent')


class HumanLoopOutput(BaseModel):
    OutputS3Uri: String


class HumanLoopSummary(BaseModel):
    CreationTime: Optional[Timestamp] = None
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    FlowDefinitionArn_1: Optional[FlowDefinitionArn] = Field(
        None, alias='FlowDefinitionArn'
    )
    HumanLoopName_1: Optional[HumanLoopName] = Field(None, alias='HumanLoopName')
    HumanLoopStatus_1: Optional[HumanLoopStatus] = Field(None, alias='HumanLoopStatus')


class StartHumanLoopRequest(BaseModel):
    DataAttributes: Optional[HumanLoopDataAttributes] = None
    FlowDefinitionArn_1: FlowDefinitionArn = Field(..., alias='FlowDefinitionArn')
    HumanLoopInput_1: HumanLoopInput = Field(..., alias='HumanLoopInput')
    HumanLoopName_1: HumanLoopName = Field(..., alias='HumanLoopName')


class DescribeHumanLoopResponse(BaseModel):
    CreationTime: Timestamp
    FailureCode: Optional[String] = None
    FailureReason: Optional[String] = None
    FlowDefinitionArn_1: FlowDefinitionArn = Field(..., alias='FlowDefinitionArn')
    HumanLoopArn_1: HumanLoopArn = Field(..., alias='HumanLoopArn')
    HumanLoopName_1: HumanLoopName = Field(..., alias='HumanLoopName')
    HumanLoopOutput_1: Optional[HumanLoopOutput] = Field(None, alias='HumanLoopOutput')
    HumanLoopStatus_1: HumanLoopStatus = Field(..., alias='HumanLoopStatus')


class HumanLoopSummaries(RootModel[List[HumanLoopSummary]]):
    root: List[HumanLoopSummary]


class ListHumanLoopsResponse(BaseModel):
    HumanLoopSummaries_1: HumanLoopSummaries = Field(..., alias='HumanLoopSummaries')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
